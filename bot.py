from aiogram import Bot, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import ContentType
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os
from datetime import datetime
import random


from time import sleep #import sleep for timeout set
logfilename = 'log.csv' #difining logfile
storage=MemoryStorage() #defining storage in memory
bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher(bot, storage=storage)
button1 = KeyboardButton('–û–≤–µ–Ω')
button2 = KeyboardButton('–¢–µ–ª–µ—Ü')
button3 = KeyboardButton('–ë–ª–∏–∑–Ω–µ—Ü—ã')
button4 = KeyboardButton('–†–∞–∫')
button5 = KeyboardButton('–õ–µ–≤')
button6 = KeyboardButton('–î–µ–≤–∞')
button7 = KeyboardButton('–í–µ—Å—ã')
button8 = KeyboardButton('–°–∫–æ—Ä–ø–∏–æ–Ω')
button9 = KeyboardButton('–°—Ç—Ä–µ–ª–µ—Ü')
button10 = KeyboardButton('–ö–æ–∑–µ—Ä–æ–≥')
button11 = KeyboardButton('–í–æ–¥–æ–ª–µ–π')
button12 = KeyboardButton('–†—ã–±—ã')
#keyboard buttons for every zodiac sign

keyboard1 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(button1).add(button2).add(button3).add(button4).add(button5).add(button6).add(button7).add(button8).add(button9).add(button10).add(button11).add(button12)
#whole keyboard


class FSMSay(StatesGroup):
    first = State()
    second = State()
#defining bot states

@dp.message_handler()
async def command_start(message : types.Message):
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –£–∑–Ω–∞–π –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—åüòÄ –î–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è —Å–æ –∑–≤–µ–∑–¥ –æ–Ω–ª–∞–π–Ω, –∑–∞–≤–∏—Å—è—Ç –æ—Ç –º–æ–º–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–µ—Å–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫:', reply_markup=keyboard1)
    await FSMSay.first.set() #setting first state
    userid = message.chat.id
    user_first_name = str(message.chat.first_name)
    user_last_name = str(message.chat.last_name)
    user_username = str(message.chat.username)
    timenow = datetime.now()
    with open(logfilename, 'a', encoding="utf-8") as file_object:
        file_object.write(f'"{timenow}","{userid}","{user_username}","{user_first_name} {user_last_name}","request","{message.text}"\n')
#logging


@dp.message_handler(state=FSMSay.first)
async def command_start(message : types.Message, state: FSMContext):
    await FSMSay.second.set() #setting second state
    async with state.proxy() as data:
        data['znak1'] = message.text #saving first sign in state proxy storage
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –µ–≥–æ/–µ–µ –∑–Ω–∞–µ–∫:', reply_markup=keyboard1)
    userid = message.chat.id
    user_first_name = str(message.chat.first_name)
    user_last_name = str(message.chat.last_name)
    user_username = str(message.chat.username)
    timenow = datetime.now()
    with open(logfilename, 'a', encoding="utf-8") as file_object:
        file_object.write(f'"{timenow}","{userid}","{user_username}","{user_first_name} {user_last_name}","request","{message.text}"\n')
#logging

@dp.message_handler(state=FSMSay.second)
async def command_start(message : types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['znak2'] = message.text
    if data['znak1'] == '–†–∞–∫' or data['znak2'] == '–†–∞–∫':
        result = '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ' + data['znak1'] + ' –∏ ' + data['znak2']+ ' = ' + random.choice(['üî•','‚ù§','ü§∞'])
    else:
        result = '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ' + data['znak1'] + ' –∏ ' + data['znak2']+ ' = ' + random.choice(['üî•','‚ù§','üí©','ü§∞','üòî','üí©'])
    #my space algorithm =D
    await bot.send_message(message.from_user.id, result)
    await state.finish() #closing second state
    sleep(2)
    await bot.send_message(message.from_user.id, '–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –î–∞–≤–∞–π –µ—â–µ =)')
    sleep(1)
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫:', reply_markup=keyboard1)
    await FSMSay.first.set()
    userid = message.chat.id
    user_first_name = str(message.chat.first_name)
    user_last_name = str(message.chat.last_name)
    user_username = str(message.chat.username)
    timenow = datetime.now()
    with open(logfilename, 'a', encoding="utf-8") as file_object:
        file_object.write(f'"{timenow}","{userid}","{user_username}","{user_first_name} {user_last_name}","request","{message.text}","{result}"\n')
    



executor.start_polling(dp, skip_updates=True)
